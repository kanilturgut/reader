package com.tepav.reader.models;

import java.io.Serializable;
import java.util.List;
import com.tepav.reader.repositories.DaoSession;
import com.tepav.reader.repositories.FileDao;
import com.tepav.reader.repositories.YayinDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table YAYIN.
 */
public class Yayin implements Serializable {

    private Long id;
    private String yayin_id;
    private String ytitle;
    private String ydate;
    private String yauthors;
    private String ycontent;
    private String ytype;
    private String ytype_id;
    private Integer persistanceType;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient YayinDao myDao;

    private List<File> fileList;

    public Yayin() {
    }

    public Yayin(Long id) {
        this.id = id;
    }

    public Yayin(Long id, String yayin_id, String ytitle, String ydate, String yauthors, String ycontent, String ytype, String ytype_id, Integer persistanceType) {
        this.id = id;
        this.yayin_id = yayin_id;
        this.ytitle = ytitle;
        this.ydate = ydate;
        this.yauthors = yauthors;
        this.ycontent = ycontent;
        this.ytype = ytype;
        this.ytype_id = ytype_id;
        this.persistanceType = persistanceType;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getYayinDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getYayin_id() {
        return yayin_id;
    }

    public void setYayin_id(String yayin_id) {
        this.yayin_id = yayin_id;
    }

    public String getYtitle() {
        return ytitle;
    }

    public void setYtitle(String ytitle) {
        this.ytitle = ytitle;
    }

    public String getYdate() {
        return ydate;
    }

    public void setYdate(String ydate) {
        this.ydate = ydate;
    }

    public String getYauthors() {
        return yauthors;
    }

    public void setYauthors(String yauthors) {
        this.yauthors = yauthors;
    }

    public String getYcontent() {
        return ycontent;
    }

    public void setYcontent(String ycontent) {
        this.ycontent = ycontent;
    }

    public String getYtype() {
        return ytype;
    }

    public void setYtype(String ytype) {
        this.ytype = ytype;
    }

    public String getYtype_id() {
        return ytype_id;
    }

    public void setYtype_id(String ytype_id) {
        this.ytype_id = ytype_id;
    }

    public Integer getPersistanceType() {
        return persistanceType;
    }

    public void setPersistanceType(Integer persistanceType) {
        this.persistanceType = persistanceType;
    }

    public void setFileList(List<File> fileList) {
        this.fileList = fileList;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<File> getFileList() {
        if (fileList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FileDao targetDao = daoSession.getFileDao();
            List<File> fileListNew = targetDao._queryYayin_FileList(id);
            synchronized (this) {
                if(fileList == null) {
                    fileList = fileListNew;
                }
            }
        }
        return fileList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFileList() {
        fileList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
