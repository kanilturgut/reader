package com.tepav.reader.models;

import java.io.Serializable;
import java.util.List;
import com.tepav.reader.repositories.DaoSession;
import com.tepav.reader.repositories.FileDao;
import com.tepav.reader.repositories.HaberDao;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table HABER.
 */
public class Haber implements Serializable{

    private Long id;
    private String haber_id;
    private String htitle;
    private String hcontent;
    private String hdate;
    private String dname;
    private String himage;
    private Integer persistanceType;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient HaberDao myDao;

    private List<File> fileList;

    public Haber() {
    }

    public Haber(Long id) {
        this.id = id;
    }

    public Haber(Long id, String haber_id, String htitle, String hcontent, String hdate, String dname, String himage, Integer persistanceType) {
        this.id = id;
        this.haber_id = haber_id;
        this.htitle = htitle;
        this.hcontent = hcontent;
        this.hdate = hdate;
        this.dname = dname;
        this.himage = himage;
        this.persistanceType = persistanceType;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getHaberDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getHaber_id() {
        return haber_id;
    }

    public void setHaber_id(String haber_id) {
        this.haber_id = haber_id;
    }

    public String getHtitle() {
        return htitle;
    }

    public void setHtitle(String htitle) {
        this.htitle = htitle;
    }

    public String getHcontent() {
        return hcontent;
    }

    public void setHcontent(String hcontent) {
        this.hcontent = hcontent;
    }

    public String getHdate() {
        return hdate;
    }

    public void setHdate(String hdate) {
        this.hdate = hdate;
    }

    public String getDname() {
        return dname;
    }

    public void setDname(String dname) {
        this.dname = dname;
    }

    public String getHimage() {
        return himage;
    }

    public void setHimage(String himage) {
        this.himage = himage;
    }

    public Integer getPersistanceType() {
        return persistanceType;
    }

    public void setPersistanceType(Integer persistanceType) {
        this.persistanceType = persistanceType;
    }

    public void setFileList(List<File> fileList) {
        this.fileList = fileList;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<File> getFileList() {
        if (fileList == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            FileDao targetDao = daoSession.getFileDao();
            List<File> fileListNew = targetDao._queryHaber_FileList(id);
            synchronized (this) {
                if(fileList == null) {
                    fileList = fileListNew;
                }
            }
        }
        return fileList;
    }

    public List<File> getFileListWithoutQuery() {
        return this.fileList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFileList() {
        fileList = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
