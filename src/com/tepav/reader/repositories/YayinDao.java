package com.tepav.reader.repositories;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.tepav.reader.models.Yayin;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table YAYIN.
*/
public class YayinDao extends AbstractDao<Yayin, Long> {

    public static final String TABLENAME = "YAYIN";

    /**
     * Properties of entity Yayin.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Yayin_id = new Property(1, String.class, "yayin_id", false, "YAYIN_ID");
        public final static Property Ytitle = new Property(2, String.class, "ytitle", false, "YTITLE");
        public final static Property Ydate = new Property(3, String.class, "ydate", false, "YDATE");
        public final static Property Yauthors = new Property(4, String.class, "yauthors", false, "YAUTHORS");
        public final static Property Ycontent = new Property(5, String.class, "ycontent", false, "YCONTENT");
        public final static Property Ytype = new Property(6, String.class, "ytype", false, "YTYPE");
        public final static Property Ytype_id = new Property(7, String.class, "ytype_id", false, "YTYPE_ID");
        public final static Property PersistanceType = new Property(8, Integer.class, "persistanceType", false, "PERSISTANCE_TYPE");
    };

    private DaoSession daoSession;

    private Query<Yayin> user_YayinListQuery;

    public YayinDao(DaoConfig config) {
        super(config);
    }
    
    public YayinDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'YAYIN' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'YAYIN_ID' TEXT," + // 1: yayin_id
                "'YTITLE' TEXT," + // 2: ytitle
                "'YDATE' TEXT," + // 3: ydate
                "'YAUTHORS' TEXT," + // 4: yauthors
                "'YCONTENT' TEXT," + // 5: ycontent
                "'YTYPE' TEXT," + // 6: ytype
                "'YTYPE_ID' TEXT," + // 7: ytype_id
                "'PERSISTANCE_TYPE' INTEGER);"); // 8: persistanceType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'YAYIN'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Yayin entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String yayin_id = entity.getYayin_id();
        if (yayin_id != null) {
            stmt.bindString(2, yayin_id);
        }
 
        String ytitle = entity.getYtitle();
        if (ytitle != null) {
            stmt.bindString(3, ytitle);
        }
 
        String ydate = entity.getYdate();
        if (ydate != null) {
            stmt.bindString(4, ydate);
        }
 
        String yauthors = entity.getYauthors();
        if (yauthors != null) {
            stmt.bindString(5, yauthors);
        }
 
        String ycontent = entity.getYcontent();
        if (ycontent != null) {
            stmt.bindString(6, ycontent);
        }
 
        String ytype = entity.getYtype();
        if (ytype != null) {
            stmt.bindString(7, ytype);
        }
 
        String ytype_id = entity.getYtype_id();
        if (ytype_id != null) {
            stmt.bindString(8, ytype_id);
        }
 
        Integer persistanceType = entity.getPersistanceType();
        if (persistanceType != null) {
            stmt.bindLong(9, persistanceType);
        }
    }

    @Override
    protected void attachEntity(Yayin entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Yayin readEntity(Cursor cursor, int offset) {
        Yayin entity = new Yayin( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // yayin_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ytitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ydate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // yauthors
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ycontent
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ytype
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ytype_id
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // persistanceType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Yayin entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setYayin_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setYtitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setYdate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setYauthors(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setYcontent(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setYtype(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setYtype_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPersistanceType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Yayin entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Yayin entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "yayinList" to-many relationship of User. */
    public List<Yayin> _queryUser_YayinList(Long id) {
        synchronized (this) {
            if (user_YayinListQuery == null) {
                QueryBuilder<Yayin> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                user_YayinListQuery = queryBuilder.build();
            }
        }
        Query<Yayin> query = user_YayinListQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
