package com.tepav.reader.repositories;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.tepav.reader.models.Gunluk;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table GUNLUK.
*/
public class GunlukDao extends AbstractDao<Gunluk, Long> {

    public static final String TABLENAME = "GUNLUK";

    /**
     * Properties of entity Gunluk.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Gunluk_id = new Property(1, String.class, "gunluk_id", false, "GUNLUK_ID");
        public final static Property Btitle = new Property(2, String.class, "btitle", false, "BTITLE");
        public final static Property Bcontent = new Property(3, String.class, "bcontent", false, "BCONTENT");
        public final static Property Bdate = new Property(4, String.class, "bdate", false, "BDATE");
        public final static Property Pfullname = new Property(5, String.class, "pfullname", false, "PFULLNAME");
        public final static Property Ptype = new Property(6, String.class, "ptype", false, "PTYPE");
        public final static Property Ptitle = new Property(7, String.class, "ptitle", false, "PTITLE");
        public final static Property Pimage = new Property(8, String.class, "pimage", false, "PIMAGE");
    };

    private Query<Gunluk> user_GunlukListQuery;

    public GunlukDao(DaoConfig config) {
        super(config);
    }
    
    public GunlukDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'GUNLUK' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'GUNLUK_ID' TEXT," + // 1: gunluk_id
                "'BTITLE' TEXT," + // 2: btitle
                "'BCONTENT' TEXT," + // 3: bcontent
                "'BDATE' TEXT," + // 4: bdate
                "'PFULLNAME' TEXT," + // 5: pfullname
                "'PTYPE' TEXT," + // 6: ptype
                "'PTITLE' TEXT," + // 7: ptitle
                "'PIMAGE' TEXT);"); // 8: pimage
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GUNLUK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Gunluk entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String gunluk_id = entity.getGunluk_id();
        if (gunluk_id != null) {
            stmt.bindString(2, gunluk_id);
        }
 
        String btitle = entity.getBtitle();
        if (btitle != null) {
            stmt.bindString(3, btitle);
        }
 
        String bcontent = entity.getBcontent();
        if (bcontent != null) {
            stmt.bindString(4, bcontent);
        }
 
        String bdate = entity.getBdate();
        if (bdate != null) {
            stmt.bindString(5, bdate);
        }
 
        String pfullname = entity.getPfullname();
        if (pfullname != null) {
            stmt.bindString(6, pfullname);
        }
 
        String ptype = entity.getPtype();
        if (ptype != null) {
            stmt.bindString(7, ptype);
        }
 
        String ptitle = entity.getPtitle();
        if (ptitle != null) {
            stmt.bindString(8, ptitle);
        }
 
        String pimage = entity.getPimage();
        if (pimage != null) {
            stmt.bindString(9, pimage);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Gunluk readEntity(Cursor cursor, int offset) {
        Gunluk entity = new Gunluk( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // gunluk_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // btitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bcontent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bdate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // pfullname
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // ptype
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // ptitle
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // pimage
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Gunluk entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGunluk_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBtitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBcontent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBdate(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPfullname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPtype(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPtitle(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPimage(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Gunluk entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Gunluk entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "gunlukList" to-many relationship of User. */
    public List<Gunluk> _queryUser_GunlukList(Long id) {
        synchronized (this) {
            if (user_GunlukListQuery == null) {
                QueryBuilder<Gunluk> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id.eq(null));
                user_GunlukListQuery = queryBuilder.build();
            }
        }
        Query<Gunluk> query = user_GunlukListQuery.forCurrentThread();
        query.setParameter(0, id);
        return query.list();
    }

}
